import "../pages/index.css"; 
//import "../images/avatar.jpg"; 
import { initialCards } from "./cards.js"; 
import { renderCard } from "./card.js"; 
import { closeModal, openModal, closeModalOnOverlay } from "./modal.js"; 
 
// selectors 
const placesList = document.querySelector(".places__list"); 
const popupProfile = document.querySelector(".popup_type_edit"); 
const popupProfileForm = document.forms["edit-profile"]; 
const profileTitle = document.querySelector(".profile__title"); 
const profileDescription = document.querySelector(".profile__description"); 
const profileEditButton = document.querySelector(".profile__edit-button"); 
const newCardButton = document.querySelector(".profile__add-button"); 
const popupNewCard = document.querySelector(".popup_type_new-card"); 
const popupNewCardForm = document.forms["new-place"]; 
const popupImageElement = document.querySelector(".popup_type_image"); 
const popupImage = popupImageElement.querySelector(".popup__image"); 
const popupCaption = popupImageElement.querySelector(".popup__caption"); 
 
//functions 
 
// cards  открытие картинки на весь экран - убрать стрелочный вариант, переименовать переменные
const openImagePopup = (imageURL, imageAlt, title) => { 
  popupImage.src = imageURL; 
  popupImage.alt = imageAlt; 
  popupCaption.textContent = title; 
  openModal(popupImageElement); 
}; 

// лайк карточки - перенести в card.js и убрать стрелочный вариант, переименовать переменные
function likeCard(evt){ 
  evt.target.classList.toggle("card__like-button_is-active"); 
}; 

//пример избавления от стрелочной функции
//like.addEventListener('click', function(evt) {
//evt.target.classList.toggle('element__heart_like')
//});

// удаление карточки - перенести в card.js и убрать стрелочный вариант, переименовать переменные
const deleteCard = (evt) => { 
  const parent = evt.target.closest(".card"); 
  parent.remove(); 
}; 
 
// profile 
//заполнение узла профайл значениями из формы
const handleProfileFormSubmit = (evt) => { 
  evt.preventDefault(); 
  profileTitle.textContent = popupProfileForm.name.value; 
  profileDescription.textContent = popupProfileForm.description.value; 
  closeModal(popupProfile); 
}; 
 
//заполнеие элементов формы значениями переданными функцией до открытия формы
const fillProfilePopup = (form, name, description) => { 
  form.elements.name.value = name; 
  form.elements.description.value = description; 
}; 
 
//event listeners 
// 
// image popup - прикрепления слушателя событий на попап имейдж
popupImageElement.addEventListener("click", (evt) => { 
  closeModalOnOverlay(evt); 
}); 
 
//profile popup - прикрепление слушателя события на кнопку редактирования профиля
profileEditButton.addEventListener("click", () => { 
  fillProfilePopup( 
    popupProfileForm, 
    profileTitle.textContent, 
    profileDescription.textContent, 
  ); 
  openModal(popupProfile); 
}); 
 

//отправка формы редактирования профайла
popupProfileForm.addEventListener("submit", handleProfileFormSubmit); 


//прикрепления прослушивателя клика на оверлее на форму редактирования профайла
popupProfile.addEventListener("click", (evt) => { 
  closeModalOnOverlay(evt); 
}); 
 
// add card popup - прикрепления прослушивателя клика открытия формы заполнения новой карточки места
newCardButton.addEventListener("click", () => { 
  openModal(popupNewCard); 
}); 
 
popupNewCardForm.addEventListener("submit", (evt) => { 
  evt.preventDefault(); 
  const name = popupNewCardForm.elements["place-name"].value; 
  const link = popupNewCardForm.elements.link.value; // переименовать link в "link"
  const description = name; 
  const newCard = { 
    name, 
    link, 
    description, 
  }; 
  renderCard( 
    newCard, 
    placesList, 
    likeCard, 
    deleteCard, 
    openImagePopup, 
    "start", 
  ); 
  closeModal(popupNewCard); 
  popupNewCardForm.reset(); 
}); 
 
popupNewCard.addEventListener("click", (evt) => { 
  closeModalOnOverlay(evt); 
}); 
 
// popup close button 
document.addEventListener("click", (evt) => { 
  if (evt.target.classList.contains("popup__close")) { 
    closeModal(evt.target.parentNode.parentNode); 
  } 
}); 
 
// initialization 
 
initialCards.forEach((card) => 
  renderCard(card, placesList, likeCard, deleteCard, openImagePopup), 
);
